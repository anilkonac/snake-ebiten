// Code generated by file2byteslice. DO NOT EDIT.

package shaders

var Round = []byte("// snake-ebiten\r\n// Copyright (C) 2022 Anıl Konaç\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n//go:build ignore\r\n\r\npackage main\r\n\r\nvar Color vec4\r\nvar ShadedCorners [4]float\r\nvar RectSize vec2\r\nvar RectPosInUnit vec2\r\nvar TotalSize vec2\r\nvar IsVertical float\r\n\r\nfunc Fragment(position vec4, texCoord vec2, color vec4) vec4 {\r\n\tnormColor := Color / 0xffff\r\n\r\n\tposInUnit := vec2(RectSize.x*texCoord.x, RectSize.y*texCoord.y) + RectPosInUnit\r\n\tif IsVertical > 0 {\r\n\t\tradius := TotalSize.x / 2.0\r\n\r\n\t\t// Top Left Corner\r\n\t\tif roundMult := ShadedCorners[0]; (roundMult != 0.0) && (posInUnit.x < radius) && (posInUnit.y < radius) {\r\n\t\t\tmultiplier := calcMultiplier(roundMult)\r\n\t\t\tif posInUnit.y < growUp(posInUnit.x, radius, multiplier) {\r\n\t\t\t\tnormColor.a = 0.0\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Bottom Left Corner\r\n\t\tif roundMult := ShadedCorners[1]; (roundMult != 0.0) && (posInUnit.x < radius) && (posInUnit.y > (TotalSize.y - radius)) {\r\n\t\t\tmultiplier := calcMultiplier(roundMult)\r\n\t\t\tif posInUnit.y > growDown(posInUnit.x, TotalSize.y, radius, multiplier) {\r\n\t\t\t\tnormColor.a = 0.0\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Bottom Right Corner\r\n\t\tif roundMult := ShadedCorners[2]; (roundMult != 0.0) && (posInUnit.x > radius) && (posInUnit.y > (TotalSize.y - radius)) {\r\n\t\t\tmultiplier := calcMultiplier(roundMult)\r\n\t\t\tif posInUnit.y > growDown(posInUnit.x, TotalSize.y, radius, multiplier) {\r\n\t\t\t\tnormColor.a = 0.0\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Top Right Corner\r\n\t\tif roundMult := ShadedCorners[3]; (roundMult != 0.0) && (posInUnit.x > radius) && (posInUnit.y < radius) {\r\n\t\t\tmultiplier := calcMultiplier(roundMult)\r\n\t\t\tif posInUnit.y < growUp(posInUnit.x, radius, multiplier) {\r\n\t\t\t\tnormColor.a = 0.0\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t} else {\r\n\t\t// if TotalSize.x >= TotalSize.y {\r\n\t\tradius := TotalSize.y / 2.0\r\n\r\n\t\t// Top Left Corner\r\n\t\tif roundMult := ShadedCorners[0]; (roundMult != 0.0) && (posInUnit.x < radius) && (posInUnit.y < radius) {\r\n\t\t\tmultiplier := calcMultiplier(roundMult)\r\n\t\t\tif posInUnit.x < growUp(posInUnit.y, radius, multiplier) {\r\n\t\t\t\tnormColor.a = 0.0\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Bottom Left Corner\r\n\t\tif roundMult := ShadedCorners[1]; (roundMult != 0.0) && (posInUnit.x < radius) && (posInUnit.y > radius) {\r\n\t\t\tmultiplier := calcMultiplier(roundMult)\r\n\t\t\tif posInUnit.x < growUp(posInUnit.y, radius, multiplier) {\r\n\t\t\t\tnormColor.a = 0.0\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Bottom Right Corner\r\n\t\tif roundMult := ShadedCorners[2]; (roundMult != 0.0) && (posInUnit.x > TotalSize.x-radius) && (posInUnit.y > radius) {\r\n\t\t\tmultiplier := calcMultiplier(roundMult)\r\n\t\t\tif posInUnit.x > growDown(posInUnit.y, TotalSize.x, radius, multiplier) {\r\n\t\t\t\tnormColor.a = 0.0\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Top Right Corner\r\n\t\tif roundMult := ShadedCorners[3]; (roundMult != 0.0) && (posInUnit.x > TotalSize.x-radius) && (posInUnit.y < radius) {\r\n\t\t\tmultiplier := calcMultiplier(roundMult)\r\n\t\t\tif posInUnit.x > growDown(posInUnit.y, TotalSize.x, radius, multiplier) {\r\n\t\t\t\tnormColor.a = 0.0\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tnormColor.rgb *= normColor.a\r\n\treturn normColor\r\n}\r\n\r\nfunc calcMultiplier(roundMult float) float {\r\n\tsqrt2 := sqrt(2.0)\r\n\tif roundMult < 0 {\r\n\t\treturn sqrt2 - (sqrt2-1.0)*easeInSine(-roundMult)\r\n\t} else if roundMult < 1.0 {\r\n\t\treturn 1.0 + (sqrt2-1.0)*easeOutCirc(1.0-roundMult)\r\n\t}\r\n\treturn 1.0\r\n}\r\n\r\nfunc growUp(x, radius, multiplier float) float {\r\n\treturn radius - sqrt(pow(radius*multiplier, 2.0)-pow(x-radius, 2.0))\r\n}\r\n\r\nfunc growDown(x, TotalLength, radius, multiplier float) float {\r\n\treturn TotalLength - radius + sqrt(pow(radius*multiplier, 2.0)-pow(x-radius, 2.0))\r\n}\r\n\r\n// https://easings.net/#easeOutCirc\r\nfunc easeOutCirc(x float) float {\r\n\treturn sqrt(1.0 - pow(x-1.0, 2.0))\r\n}\r\n\r\n// https://easings.net/#easeInSine\r\nfunc easeInSine(x float) float {\r\n\treturn 1.0 - cos((x*3.14159)/2.0)\r\n}\r\n")
