// Code generated by file2byteslice. DO NOT EDIT.

package shaders

var Round = []byte("// snake-ebiten\r\n// Copyright (C) 2022 Anıl Konaç\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n//go:build ignore\r\n\r\npackage main\r\n\r\nvar Color vec4\r\nvar ShadedCorners [4]float\r\nvar RectSize vec2\r\nvar RectPosInUnit vec2\r\nvar TotalSize vec2\r\nvar IsVertical float\r\n\r\nfunc Fragment(position vec4, texCoord vec2, color vec4) vec4 {\r\n\tnormColor := Color / 0xffff\r\n\r\n\tposInUnit := vec2(RectSize.x*texCoord.x, RectSize.y*texCoord.y) + RectPosInUnit\r\n\tif IsVertical > 0 {\r\n\t\t// if TotalSize.y >= TotalSize.x {\r\n\t\tradius := TotalSize.x / 2\r\n\t\t// roundCenter1 := vec2(radius)\r\n\t\troundCenter2 := vec2(radius, TotalSize.y-radius)\r\n\r\n\t\t// distToCenter1 := distance(posInUnit, roundCenter1)\r\n\t\tdistToCenter2 := distance(posInUnit, roundCenter2)\r\n\t\tmultiplier := clamp(TotalSize.y/radius, 0, 1)\r\n\r\n\t\t// Top Left Corner\r\n\t\tif (ShadedCorners[0] > 0) && (posInUnit.x < radius) &&\r\n\t\t\t(posInUnit.y < radius) && (posInUnit.y <= theFunc(posInUnit.x, radius, multiplier)) {\r\n\t\t\tnormColor.a = 0\r\n\t\t}\r\n\t\t// Bottom Left Corner\r\n\t\tif (ShadedCorners[1] > 0) && (posInUnit.x < radius) &&\r\n\t\t\t(posInUnit.y > (TotalSize.y - radius)) && (distToCenter2 > radius) {\r\n\t\t\tnormColor.a = 0\r\n\t\t}\r\n\t\t// Bottom Right Corner\r\n\t\tif (ShadedCorners[2] > 0) && (posInUnit.x > radius) &&\r\n\t\t\t(posInUnit.y > (TotalSize.y - radius)) && (distToCenter2 > radius) {\r\n\t\t\tnormColor.a = 0\r\n\t\t}\r\n\t\t// Top Right Corner\r\n\t\tif (ShadedCorners[3] > 0) && (posInUnit.x > radius) &&\r\n\t\t\t(posInUnit.y < radius) && (posInUnit.y <= theFunc(posInUnit.x, radius, multiplier)) {\r\n\t\t\tnormColor.a = 0\r\n\t\t}\r\n\t\t// }\r\n\r\n\t} else {\r\n\t\t// if TotalSize.x >= TotalSize.y {\r\n\t\tradius := TotalSize.y / 2\r\n\t\troundCenter1 := vec2(radius)\r\n\t\troundCenter2 := vec2(TotalSize.x-radius, radius)\r\n\r\n\t\tdistToCenter1 := distance(posInUnit, roundCenter1)\r\n\t\tdistToCenter2 := distance(posInUnit, roundCenter2)\r\n\r\n\t\t// radius *= clamp((TotalSize.y / TotalSize.x), 0, 1)\r\n\t\t// radius = min(radius, TotalSize.x)\r\n\t\t// Top Left Corner\r\n\t\tif (ShadedCorners[0] > 0) && (posInUnit.x < radius) &&\r\n\t\t\t(posInUnit.y < radius) && (distToCenter1 > radius) {\r\n\t\t\tnormColor.a = 0\r\n\t\t}\r\n\t\t// Bottom Left Corner\r\n\t\tif (ShadedCorners[1] > 0) && (posInUnit.x < radius) &&\r\n\t\t\t(posInUnit.y > radius) && (distToCenter1 > radius) {\r\n\t\t\tnormColor.a = 0\r\n\t\t}\r\n\t\t// Bottom Right Corner\r\n\t\tif (ShadedCorners[2] > 0) && (posInUnit.x > TotalSize.x-radius) &&\r\n\t\t\t(posInUnit.y > radius) && (distToCenter2 > radius) {\r\n\t\t\tnormColor.a = 0\r\n\t\t}\r\n\t\t// Top Right Corner\r\n\t\tif (ShadedCorners[3] > 0) && (posInUnit.x > TotalSize.x-radius) &&\r\n\t\t\t(posInUnit.y < radius) && (distToCenter2 > radius) {\r\n\t\t\tnormColor.a = 0\r\n\t\t}\r\n\t\t// }\r\n\t}\r\n\r\n\tnormColor.rgb *= normColor.a\r\n\treturn normColor\r\n}\r\n\r\nfunc theFunc(x float, radius float, multiplier float) float {\r\n\t// if multiplier == 1 {\r\n\t// \treturn radius - sqrt(radius*radius-(x-radius)*(x-radius))\r\n\t// }\r\n\t// return multiplier * ( /*radius -*/ pow(x-radius, 2) / radius)\r\n\r\n\t// Linear interpolation between squared function and circle function\r\n\ty0 := multiplier * ( /*radius -*/ pow(x-radius, 2) / radius)\r\n\tx0 := 0.0\r\n\tx1 := 1.0\r\n\ty1 := radius - sqrt(radius*radius-(x-radius)*(x-radius))\r\n\r\n\treturn y0 + (multiplier-x0)*(y1-y0)/(x1-x0)\r\n}\r\n")
