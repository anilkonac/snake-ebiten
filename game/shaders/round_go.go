// Code generated by file2byteslice. DO NOT EDIT.

package shaders

var Round = []byte("//go:build ignore\r\n\r\npackage main\r\n\r\nvar (\r\n\tRadius     float\r\n\tIsVertical float\r\n\tDimension  vec2\r\n)\r\n\r\nfunc Fragment(position vec4, texCoord vec2, color vec4) vec4 {\r\n\tnormColor := color / 0xffff\r\n\talpha := 0.0\r\n\r\n\theadCenter1 := vec2(Radius, Radius)\r\n\tif Dimension.x == Dimension.y {\r\n\t\tif distance(texCoord, headCenter1) <= Radius {\r\n\t\t\talpha = normColor.a\r\n\t\t}\r\n\t} else if IsVertical > 0.0 {\r\n\t\theadCenter2 := vec2(Radius, Dimension.y-Radius)\r\n\r\n\t\tif (texCoord.y < headCenter1.y) && (distance(texCoord, headCenter1) <= Radius) {\r\n\t\t\talpha = normColor.a\r\n\t\t} else if (texCoord.y >= headCenter1.y) && (texCoord.y <= headCenter2.y) {\r\n\t\t\talpha = normColor.a\r\n\t\t} else if (texCoord.y > headCenter2.y) && (distance(texCoord, headCenter2) <= Radius) {\r\n\t\t\talpha = normColor.a\r\n\t\t}\r\n\t} else {\r\n\t\theadCenter2 := vec2(Dimension.x-Radius, Radius)\r\n\r\n\t\tif (texCoord.x < headCenter1.x) && (distance(texCoord, headCenter1) <= Radius) {\r\n\t\t\talpha = normColor.a\r\n\t\t} else if (texCoord.x >= headCenter1.x) && (texCoord.x <= headCenter2.x) {\r\n\t\t\talpha = normColor.a\r\n\t\t} else if (texCoord.x > headCenter2.x) && (distance(texCoord, headCenter2) <= Radius) {\r\n\t\t\talpha = normColor.a\r\n\t\t}\r\n\t}\r\n\r\n\tnormColor.a = alpha\r\n\tnormColor.rgb *= normColor.a\r\n\treturn normColor\r\n}\r\n")
