// Code generated by file2byteslice. DO NOT EDIT.

package shaders

var SnakeHead = []byte("//go:build ignore\n\npackage main\n\nvar (\n\tRadius     float\n\tDirection  float\n\tDistToFood float\n\tSize       vec2\n)\n\nfunc Fragment(position vec4, texCoord vec2, color vec4) vec4 {\n\tclr := color\n\tmouthRadius := Radius * 1.10\n\n\theadCenter1 := vec2(Radius, Radius)\n\tvar headCenter2 vec2\n\tif Direction <= 1.0 { // if direction is vertical\n\t\theadCenter2 = vec2(Radius, Size.y-Radius)\n\t} else {\n\t\theadCenter2 = vec2(Size.x-Radius, Radius)\n\t}\n\n\tif Direction == 0.0 { // up\n\t\tmouthCenter := vec2(Radius, -DistToFood*mouthRadius)\n\t\tif (texCoord.y < headCenter1.y) && ((distance(texCoord, headCenter1) > Radius) || (distance(texCoord, mouthCenter) < mouthRadius)) {\n\t\t\tclr.a = 0.0\n\t\t} else if (texCoord.y > headCenter2.y) && (distance(texCoord, headCenter2) > Radius) {\n\t\t\tclr.a = 0.0\n\t\t}\n\t} else if Direction == 1.0 { // down\n\t\tmouthCenter := vec2(Radius, Size.y+DistToFood*mouthRadius)\n\t\tif (texCoord.y < headCenter1.y) && (distance(texCoord, headCenter1) > Radius) {\n\t\t\tclr.a = 0.0\n\t\t} else if (texCoord.y > headCenter2.y) && ((distance(texCoord, headCenter2) > Radius) || (distance(texCoord, mouthCenter) < mouthRadius)) {\n\t\t\tclr.a = 0.0\n\t\t}\n\t} else if Direction == 2.0 { // left\n\t\tmouthCenter := vec2(-DistToFood*mouthRadius, Radius)\n\t\tif (texCoord.x < headCenter1.x) && ((distance(texCoord, headCenter1) > Radius) || (distance(texCoord, mouthCenter) < mouthRadius)) {\n\t\t\tclr.a = 0.0\n\t\t} else if (texCoord.x > headCenter2.x) && (distance(texCoord, headCenter2) > Radius) {\n\t\t\tclr.a = 0.0\n\t\t}\n\t} else { // right\n\t\tmouthCenter := vec2(Size.x+DistToFood*mouthRadius, Radius)\n\t\tif (texCoord.x < headCenter1.x) && (distance(texCoord, headCenter1) > Radius) {\n\t\t\tclr.a = 0.0\n\t\t} else if (texCoord.x > headCenter2.x) && ((distance(texCoord, headCenter2) > Radius) || (distance(texCoord, mouthCenter) < mouthRadius)) {\n\t\t\tclr.a = 0.0\n\t\t}\n\t}\n\n\tclr.rgb *= clr.a\n\treturn clr\n}\n")
